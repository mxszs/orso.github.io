<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>or_so</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-23T03:43:54.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>or_so</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>dva</title>
    <link href="http://yoursite.com/2018/05/23/dva/"/>
    <id>http://yoursite.com/2018/05/23/dva/</id>
    <published>2018-05-23T01:46:40.000Z</published>
    <updated>2018-05-23T03:43:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>dva 我认为可以理解为对redux的一种封装</p><blockquote><p>redux 的工作流程图， 更容易去理解dva中的model</p></blockquote><p><img src="../../../../image/redux.jpg" alt="redux.jpg"></p><h2 id="安装dva-cli"><a href="#安装dva-cli" class="headerlink" title="安装dva-cli"></a>安装dva-cli</h2><p>dva 有自己的脚手架，在开发项目的时候，我们需要先安装一个脚手架</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ npm install -g dva-cli</span><br></pre></td></tr></table></figure><p>安装完成后，可以通过 dva -v 查看版本</p><h2 id="创建新应用"><a href="#创建新应用" class="headerlink" title="创建新应用"></a>创建新应用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1. dva new myApp </span><br><span class="line">2. cd myApp</span><br><span class="line">3. npm install</span><br><span class="line">4. npm start</span><br></pre></td></tr></table></figure><p>（DVA）定义组件一般有三种方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 1. 传统写法</span><br><span class="line">const App = React.createClass(&#123;&#125;);</span><br><span class="line"></span><br><span class="line">// 2. es6 的写法</span><br><span class="line">class App extends React.Component(&#123;&#125;);</span><br><span class="line"></span><br><span class="line">// 3. stateless 的写法（函数的写法，但是不会调用react 的生命周期）</span><br><span class="line">const App = (props) =&gt; (&#123;&#125;);</span><br></pre></td></tr></table></figure></p><p>其中第1种是不推荐的写法，第2种是在你的组件涉及 react 的生命周期方法的时候采用这种写法(可以使用this)，而第3种则是我们一般推荐的写法。</p><h2 id="初始化dva"><a href="#初始化dva" class="headerlink" title="初始化dva"></a>初始化dva</h2><p><img src="../../../../image/dvainstall.png" alt="dvainstall.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">app = dva(opts)</span><br><span class="line"></span><br><span class="line">创建应用，返回 dva 实例</span><br><span class="line"></span><br><span class="line">opts 包含：</span><br><span class="line"></span><br><span class="line">history：指定给路由用的 history，默认是 hashHistory</span><br><span class="line">initialState：指定初始数据，优先级高于 model 中的 state，默认是 &#123;&#125;</span><br><span class="line">如果要配置 history 为 browserHistory，可以这样：</span><br><span class="line"></span><br><span class="line">import createHistory from &apos;history/createBrowserHistory&apos;;</span><br><span class="line">const app = dva(&#123;</span><br><span class="line">  history: createHistory(),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const app = dva(&#123;</span><br><span class="line">  history,</span><br><span class="line">  initialState,</span><br><span class="line">  onError,</span><br><span class="line">  onAction,</span><br><span class="line">  onStateChange,</span><br><span class="line">  onReducer,</span><br><span class="line">  onEffect,</span><br><span class="line">  onHmr,</span><br><span class="line">  extraReducers,</span><br><span class="line">  extraEnhancers,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="定义-Model"><a href="#定义-Model" class="headerlink" title="定义 Model"></a>定义 Model</h2><p>model 是 dva 中最重要的概念</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">app.model(&#123;</span><br><span class="line">  namespace: &apos;todo&apos;, //  model 的命名空间，同时也是他在全局 state 上的属性，只能用字符串，不支持通过 . 的方式创建多层命名空间</span><br><span class="line"></span><br><span class="line">  state: [], // 初始值，优先级低于传给 dva() 的 opts.initialState。</span><br><span class="line">    &lt;!-- const app = dva(&#123;</span><br><span class="line">        initialState: &#123; count: 1 &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">    app.model(&#123;</span><br><span class="line">        namespace: &apos;count&apos;,</span><br><span class="line">        state: 0,</span><br><span class="line">    &#125;); </span><br><span class="line">    state.count 为 1</span><br><span class="line">    --&gt;</span><br><span class="line"></span><br><span class="line">  reducers: &#123; // 以 key/value 格式定义 reducer。用于处理同步操作，唯一可以修改 state 的地方。由 action 触发</span><br><span class="line">    add(state, &#123; payload: todo &#125;) &#123;</span><br><span class="line">      // 保存数据到 state</span><br><span class="line">      return [...state, todo];</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  effects: &#123;</span><br><span class="line">    *save(&#123; payload: todo &#125;, &#123; put, call &#125;) &#123;</span><br><span class="line">      // 调用 saveTodoToServer，成功后触发 `add` action 保存到 state</span><br><span class="line">      yield call(saveTodoToServer, todo);</span><br><span class="line">      yield put(&#123; type: &apos;add&apos;, payload: todo &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &lt;!-- 以 key/value 格式定义 effect。用于处理异步操作和业务逻辑，不直接修改 state。由 action 触发，可以触发 action，可以和服务器交互，可以获取全局 state 的数据等等。</span><br><span class="line"></span><br><span class="line">格式为 *(action, effects) =&gt; void 或 [*(action, effects) =&gt; void, &#123; type &#125;] --&gt;</span><br><span class="line"></span><br><span class="line">  subscriptions: &#123;</span><br><span class="line">    setup(&#123; history, dispatch &#125;) &#123;</span><br><span class="line">      // 监听 history 变化，当进入 `/` 时触发 `load` action</span><br><span class="line">      return history.listen((&#123; pathname &#125;) =&gt; &#123;</span><br><span class="line">        if (pathname === &apos;/&apos;) &#123;</span><br><span class="line">          dispatch(&#123; type: &apos;load&apos; &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">&lt;!-- 以 key/value 格式定义 subscription。subscription 是订阅，用于订阅一个数据源，然后根据需要 dispatch 相应的 action。在 app.start() 时被执行，数据源可以是当前的时间、服务器的 websocket 连接、keyboard 输入、geolocation 变化、history 路由变化等等。</span><br><span class="line"></span><br><span class="line">格式为 (&#123; dispatch, history &#125;, done) =&gt; unlistenFunction。 --&gt;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>当我们使用put发送一条action的时候 与之对于的reducers就会接收到这个消息 然后在里面返回state等数据</p><p>在reducers中尽量只做state的数据返回 不要在这里写相关的逻辑</p><p>上面出现了 put call 这两个单词</p><p>其实 不止这几个 </p><p>一般常用的有put call select take </p><ul><li>put  用来发起一条action</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">用于触发action</span><br><span class="line">yield put(&#123; type: &apos;add&apos;, payload: todo &#125;);</span><br></pre></td></tr></table></figure><ul><li>call 以异步的方式调用函数，用于异步逻辑，支持promise</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">yield call(saveTodoToServer, todo);</span><br><span class="line"></span><br><span class="line">saveTodoToServer这里可以是一个请求</span><br><span class="line">export function saveTodoToServer(payload) &#123;</span><br><span class="line">  return axios.get(`xxx`);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>select 从state中获取相关的数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const todo = yield selecct(stete =&gt; state.count)</span><br></pre></td></tr></table></figure><ul><li>take 获取发送的数据</li></ul><blockquote><p>effects   接收数据</p></blockquote><p>dispatch 是根据你effects里面设置的type内容 然后转发到指定的model的 所以你这边 要设置正确以后 在model那边才能接收到你发送的这条action</p><p>dispatch 在使用connect包裹的组件中可以通过 const { dispatch } =  this.props; 拿到</p><p>当我们在页面中进行操作时，可以通过dispatch 分发这条action到model中</p><p>具体的代码，比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">save = (todo) =&gt;&#123;</span><br><span class="line">    if (todo !== &apos;&apos;) &#123;</span><br><span class="line">        dispath(&#123;type:&apos;count/save&apos;, plyload: todo&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个count就是在model中设置的namespace,save就是effects中你自己起的type<br>plyload是传过去的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">effects: &#123;</span><br><span class="line">    *save(&#123; payload: todo &#125;, &#123; put, call &#125;) &#123;</span><br><span class="line">      // 调用 saveTodoToServer，成功后触发 `add` action 保存到 state</span><br><span class="line">      yield call(saveTodoToServer, todo);</span><br><span class="line">      yield put(&#123; type: &apos;add&apos;, payload: todo &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><blockquote><p>reducers 处理数据</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">reducers: &#123; </span><br><span class="line">    add(state, &#123; payload: todo &#125;) &#123;</span><br><span class="line">      // 保存数据到 state</span><br><span class="line">      return [...state, todo];</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><blockquote><p>subscriptions 监听数据</p></blockquote><h1 id="react组件生命周期"><a href="#react组件生命周期" class="headerlink" title="react组件生命周期"></a>react组件生命周期</h1><p>组件的生命周期可分成三个状态：</p><ul><li>Mounting：已插入真实 DOM</li><li>Updating：正在被重新渲染</li><li>Unmounting：已移出真实 DOM<br>生命周期的方法有：</li><li>componentWillMount 在渲染前调用,在客户端也在服务端。</li><li>componentDidMount : 在第一次渲染后调用，只在客户端。之后组件已经生成了对应的DOM结构，可以通过this.getDOMNode()来进行访问。 如果你想和其他JavaScript框架一起使用，可以在这个方法中调用setTimeout, setInterval或者发送AJAX请求等操作(防止异部操作阻塞UI)。</li><li>componentWillReceiveProps 在组件接收到一个新的prop时被调用。这个方法在初始化render时不会被调用。</li><li>shouldComponentUpdate 返回一个布尔值。在组件接收到新的props或者state时被调用。在初始化时或者使用forceUpdate时不被调用。可以在你确认不需要更新组件时使用。</li><li>componentWillUpdate在组件接收到新的props或者state但还没有render时被调用。在初始化时不会被调用。</li><li>componentDidUpdate 在组件完成更新后立即调用。在初始化时不会被调用。</li><li>componentWillUnmount在组件从 DOM 中移除的时候立刻被调用。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;dva 我认为可以理解为对redux的一种封装&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;redux 的工作流程图， 更容易去理解dva中的model&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;../../../../image/redux.jpg&quot; al
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Record</title>
    <link href="http://yoursite.com/2018/05/22/Record/"/>
    <id>http://yoursite.com/2018/05/22/Record/</id>
    <published>2018-05-22T03:33:54.000Z</published>
    <updated>2018-05-22T04:49:47.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">当输入框停止的时候进行数据请求</span><br><span class="line">debounce = (cb = () =&gt; &#123; &#125;, time = 500) =&gt; &#123;</span><br><span class="line">    if (this.timer) &#123;</span><br><span class="line">      clearTimeout(this.timer);</span><br><span class="line">    &#125;</span><br><span class="line">    this.timer = setTimeout(() =&gt; &#123;</span><br><span class="line">      cb();</span><br><span class="line">    &#125;, time);</span><br><span class="line">  &#125;;</span><br><span class="line">  handleInputChange = (event) =&gt; &#123;</span><br><span class="line">    const keyword = event.target.value;</span><br><span class="line">    this.debounce(() =&gt; this.getData(keyword, 1));</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><blockquote><p>在react-router4.0版本中，取地址栏中的参数时使用以下方式</p></blockquote><ol><li>import qs from ‘querystring’;</li><li>const { id } = qs.parse(this.props.location.search.slice(1));（视情况而定）</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>this is my file</title>
    <link href="http://yoursite.com/2018/05/21/my%20file/"/>
    <id>http://yoursite.com/2018/05/21/my file/</id>
    <published>2018-05-21T11:20:25.000Z</published>
    <updated>2018-05-22T03:39:02.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="你好-世界"><a href="#你好-世界" class="headerlink" title="你好 世界"></a>你好 世界</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">fetch(`xxx`, &#123;</span><br><span class="line">                    method: &apos;POST&apos;,</span><br><span class="line">                    credentials: &apos;same-origin&apos;,</span><br><span class="line">                    headers: &#123;</span><br><span class="line">                        &apos;Content-Type&apos;: &apos;application/json&apos;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    body: JSON.stringify(values),</span><br><span class="line">                    // values 是个对象</span><br><span class="line">                &#125;).then(res =&gt; res.blob().then((blob) =&gt; &#123;</span><br><span class="line">                    const a = document.createElement(&apos;a&apos;);</span><br><span class="line">                    const url = window.URL.createObjectURL(blob);</span><br><span class="line">                    const filename = `$&#123;values.applicationName&#125;.zip`;</span><br><span class="line">                    a.href = url;</span><br><span class="line">                    a.download = filename;</span><br><span class="line">                    a.click();</span><br><span class="line">                    window.URL.revokeObjectURL(url);</span><br><span class="line">                &#125;));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;你好-世界&quot;&gt;&lt;a href=&quot;#你好-世界&quot; class=&quot;headerlink&quot; title=&quot;你好 世界&quot;&gt;&lt;/a&gt;你好 世界&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>欢迎来到我的blog</title>
    <link href="http://yoursite.com/2018/05/21/hello-world/"/>
    <id>http://yoursite.com/2018/05/21/hello-world/</id>
    <published>2018-05-21T10:33:00.000Z</published>
    <updated>2018-05-22T06:30:28.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="此网站用来做一些记录"><a href="#此网站用来做一些记录" class="headerlink" title="此网站用来做一些记录"></a>此网站用来做一些记录</h3><hr><p>or_so</p><hr><p><img src="../../../../image/or.jpg" alt="or.jpg"></p><p><a href="/Memorandum" target="_self" class="nav-list-link">Memorandum</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;此网站用来做一些记录&quot;&gt;&lt;a href=&quot;#此网站用来做一些记录&quot; class=&quot;headerlink&quot; title=&quot;此网站用来做一些记录&quot;&gt;&lt;/a&gt;此网站用来做一些记录&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;or_so&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;../..
      
    
    </summary>
    
    
  </entry>
  
</feed>
